/* The following code was generated by JFlex 1.7.0 */

/*Correr despu√©s del parser!*/
import java_cup.runtime.*;
import java.util.ArrayList;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>ada95_tokens.flex</tt>
 */
class Ada95Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\14\1\12\1\0\1\14\1\15\22\0\1\3\1\55\1\11"+
    "\1\5\2\0\1\52\1\16\1\62\1\63\1\64\1\7\1\65\1\10"+
    "\1\6\1\66\12\2\1\67\1\70\1\71\1\54\1\72\2\0\1\25"+
    "\1\35\1\20\1\32\1\17\1\24\1\40\1\33\1\37\1\1\1\47"+
    "\1\26\1\44\1\31\1\34\1\41\1\51\1\22\1\30\1\21\1\23"+
    "\1\50\1\45\1\43\1\42\1\1\1\56\1\0\1\57\1\0\1\4"+
    "\1\0\1\25\1\35\1\20\1\32\1\17\1\24\1\40\1\33\1\37"+
    "\1\1\1\47\1\26\1\44\1\31\1\34\1\41\1\51\1\22\1\30"+
    "\1\21\1\23\1\13\1\45\1\43\1\42\1\1\1\60\1\53\1\61"+
    "\262\0\2\36\115\0\1\27\u1faa\0\1\46\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\4\1\11\10\2\1\1\5\2\1\1\6\2"+
    "\1\12\1\13\1\14\1\1\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\5\0\1\35\2\0\1\36"+
    "\14\2\1\0\7\2\1\37\5\2\1\0\1\2\2\0"+
    "\6\2\1\40\1\0\2\2\1\41\1\2\1\42\2\2"+
    "\1\43\1\44\1\45\1\43\1\44\1\45\10\2\1\0"+
    "\1\2\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\32\1\0"+
    "\1\63\1\64\1\0\2\4\1\36\1\0\2\2\1\65"+
    "\1\2\1\0\1\2\1\0\4\2\1\0\10\2\1\66"+
    "\2\2\1\0\1\2\2\67\4\2\1\70\2\2\1\71"+
    "\1\0\1\2\1\72\2\73\2\2\1\0\1\2\3\0"+
    "\3\2\1\74\1\2\1\75\2\2\1\0\2\2\1\0"+
    "\1\2\1\76\3\2\1\0\1\2\1\77\4\2\1\0"+
    "\1\2\1\100\1\2\1\101\1\102\1\2\1\0\1\2"+
    "\1\0\1\2\1\103\1\0\1\104\1\0\1\104\3\2"+
    "\2\105\2\106\1\0\2\2\1\107\2\110\1\2\1\111"+
    "\1\112\6\2\1\0\1\2\1\0\2\2\1\0\3\2"+
    "\1\0\1\2\1\0\1\2\1\0\2\2\1\113\1\0"+
    "\1\2\3\0\3\2\1\114\3\2\1\0\2\2\1\0"+
    "\1\2\1\0\1\2\1\115\1\2\1\0\2\2\1\116"+
    "\3\2\1\0\1\2\1\0\1\2\1\117\1\0\1\2"+
    "\2\120\2\0\2\121\1\122\1\2\1\0\1\2\1\0"+
    "\7\2\1\123\2\124\2\125\1\2\1\107\1\126\1\0"+
    "\2\2\1\127\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\130\1\0\1\2\3\0\4\2\1\131\1\132\1\0"+
    "\2\2\1\0\1\2\2\133\1\2\1\0\5\2\1\0"+
    "\1\2\1\0\1\2\2\134\1\103\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\135\1\0\1\2\1\136\1\137"+
    "\2\2\1\0\1\2\2\140\1\141\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\142\2\0\1\142"+
    "\3\2\2\143\2\144\1\0\2\2\1\0\1\2\1\0"+
    "\1\2\1\145\2\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\2\146\2\147\1\150"+
    "\1\0\1\2\2\151\1\0\1\2\1\0\1\2\2\152"+
    "\1\0\1\153\1\2\1\153\1\154\2\155\1\156\2\157"+
    "\2\160\2\2\2\161\2\162\1\0\1\2\2\163\1\0"+
    "\1\2\2\164\2\165\2\166\2\167\2\2\2\170\2\171"+
    "\1\172\1\173";

  private static int [] zzUnpackAction() {
    int [] result = new int[487];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\166"+
    "\0\u019d\0\166\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff"+
    "\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7"+
    "\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af"+
    "\0\u06ea\0\u0725\0\u0760\0\u079b\0\u07d6\0\166\0\166\0\166"+
    "\0\166\0\166\0\166\0\u0811\0\166\0\u084c\0\u0887\0\166"+
    "\0\u08c2\0\u08fd\0\u0938\0\u0973\0\166\0\u09ae\0\u09e9\0\u0a24"+
    "\0\u0a5f\0\u0a9a\0\166\0\u0ad5\0\u0b10\0\u0b10\0\u0b4b\0\u0b86"+
    "\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e"+
    "\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36"+
    "\0\u0f71\0\u0fac\0\261\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3"+
    "\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab"+
    "\0\u12e6\0\u1321\0\261\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448"+
    "\0\261\0\u1483\0\u14be\0\166\0\166\0\u14f9\0\261\0\261"+
    "\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1"+
    "\0\u170c\0\u1747\0\u1782\0\166\0\166\0\166\0\166\0\166"+
    "\0\166\0\166\0\166\0\166\0\166\0\166\0\166\0\166"+
    "\0\166\0\u17bd\0\u17f8\0\u1833\0\u186e\0\166\0\u18a9\0\166"+
    "\0\u18e4\0\u191f\0\u195a\0\261\0\u1995\0\u19d0\0\u1a0b\0\u1a46"+
    "\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e"+
    "\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\261\0\u1d80\0\u1dbb"+
    "\0\u1df6\0\u1e31\0\166\0\261\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d"+
    "\0\261\0\u1f58\0\u1f93\0\261\0\u1fce\0\u2009\0\u2044\0\u207f"+
    "\0\u20ba\0\u20f5\0\u2130\0\u216b\0\u21a6\0\u21e1\0\u221c\0\u2257"+
    "\0\u2292\0\u22cd\0\u2308\0\261\0\u2343\0\261\0\u237e\0\u23b9"+
    "\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0\0\261\0\u251b\0\u2556"+
    "\0\u2591\0\u25cc\0\u2607\0\261\0\u2642\0\u267d\0\u26b8\0\u26f3"+
    "\0\u272e\0\u2769\0\261\0\u27a4\0\261\0\261\0\u27df\0\u281a"+
    "\0\u2855\0\u2890\0\u28cb\0\u2906\0\u2941\0\166\0\u297c\0\261"+
    "\0\u29b7\0\u29f2\0\u2a2d\0\166\0\261\0\166\0\261\0\u2a68"+
    "\0\u2aa3\0\u2ade\0\261\0\166\0\261\0\u2b19\0\261\0\261"+
    "\0\u2b54\0\u2b8f\0\u2bca\0\u2c05\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1"+
    "\0\u2d2c\0\u2d67\0\u2da2\0\u2ddd\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9"+
    "\0\u2f04\0\u2f3f\0\u2f7a\0\u2fb5\0\u2ff0\0\u302b\0\261\0\u3066"+
    "\0\u30a1\0\u30dc\0\u3117\0\u3152\0\u318d\0\u31c8\0\u3203\0\261"+
    "\0\u323e\0\u3279\0\u32b4\0\u32ef\0\u332a\0\u3365\0\u33a0\0\u33db"+
    "\0\u3416\0\u3451\0\261\0\u348c\0\u34c7\0\u3502\0\u353d\0\261"+
    "\0\u3578\0\u35b3\0\u35ee\0\u3629\0\u3664\0\u369f\0\u36da\0\261"+
    "\0\u3715\0\u3750\0\166\0\261\0\u378b\0\u37c6\0\166\0\261"+
    "\0\261\0\u3801\0\u383c\0\u3877\0\u38b2\0\u38ed\0\u3928\0\u3963"+
    "\0\u399e\0\u39d9\0\u3a14\0\u3a4f\0\261\0\166\0\261\0\166"+
    "\0\261\0\u3a8a\0\166\0\261\0\u3ac5\0\u3b00\0\u3b3b\0\261"+
    "\0\u3b76\0\u3bb1\0\u3bec\0\u3c27\0\u3c62\0\u3c9d\0\261\0\u3cd8"+
    "\0\u3d13\0\u3d4e\0\u3d89\0\u3dc4\0\u3dff\0\u3e3a\0\u3e75\0\u3eb0"+
    "\0\261\0\261\0\u3eeb\0\u3f26\0\u3f61\0\u3f9c\0\u3fd7\0\166"+
    "\0\261\0\u4012\0\u404d\0\u4088\0\u40c3\0\u40fe\0\u4139\0\u4174"+
    "\0\u41af\0\u41ea\0\u4225\0\u4260\0\166\0\261\0\u429b\0\u42d6"+
    "\0\u4311\0\u434c\0\u4387\0\u43c2\0\u43fd\0\261\0\u4438\0\u4473"+
    "\0\261\0\261\0\u44ae\0\u44e9\0\u4524\0\u455f\0\166\0\261"+
    "\0\261\0\u459a\0\u45d5\0\u4610\0\u464b\0\u4686\0\u46c1\0\u46fc"+
    "\0\u4737\0\166\0\u4772\0\u47ad\0\261\0\u47e8\0\u4823\0\u485e"+
    "\0\166\0\261\0\166\0\261\0\u4899\0\u48d4\0\u490f\0\u494a"+
    "\0\u4985\0\u49c0\0\u49fb\0\261\0\u4a36\0\u4a71\0\u4aac\0\u4ae7"+
    "\0\u4b22\0\u4b5d\0\u4b98\0\u4bd3\0\u4c0e\0\u4c49\0\u4c84\0\u4cbf"+
    "\0\166\0\261\0\166\0\261\0\261\0\u4cfa\0\u4d35\0\166"+
    "\0\261\0\u4d70\0\u4dab\0\u4de6\0\u4e21\0\166\0\261\0\u4e5c"+
    "\0\166\0\u4e97\0\261\0\261\0\166\0\261\0\261\0\166"+
    "\0\261\0\166\0\261\0\u4ed2\0\u4f0d\0\166\0\261\0\166"+
    "\0\261\0\u4f48\0\u4f83\0\166\0\261\0\u4fbe\0\u4ff9\0\166"+
    "\0\261\0\166\0\261\0\166\0\261\0\166\0\261\0\u5034"+
    "\0\u506f\0\166\0\261\0\166\0\261\0\261\0\261";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[487];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\2\3\1\7\1\10\1\11"+
    "\1\12\1\6\1\13\2\6\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\4\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\4\1\37\1\40\1\41\1\3\3\4\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\11\63"+
    "\1\64\1\65\2\63\1\65\55\63\74\0\2\4\1\0"+
    "\1\66\6\0\1\4\3\0\10\4\1\0\6\4\1\0"+
    "\7\4\1\0\3\4\23\0\1\5\1\0\1\67\1\70"+
    "\1\71\10\0\1\72\56\0\1\6\6\0\4\6\63\0"+
    "\1\73\74\0\1\74\63\0\2\4\1\6\1\66\5\0"+
    "\1\6\1\13\2\6\1\0\10\4\1\0\6\4\1\0"+
    "\7\4\1\0\3\4\21\0\12\75\1\0\1\75\2\0"+
    "\1\76\54\75\1\0\2\4\1\0\1\66\6\0\1\4"+
    "\3\0\7\4\1\77\1\0\1\4\1\100\4\4\1\0"+
    "\4\4\1\101\2\4\1\0\3\4\22\0\2\4\1\0"+
    "\1\66\6\0\1\4\3\0\6\4\1\102\1\4\1\0"+
    "\4\4\1\103\1\4\1\0\7\4\1\0\3\4\22\0"+
    "\2\4\1\0\1\66\6\0\1\4\3\0\1\104\2\4"+
    "\1\105\2\4\1\106\1\4\1\0\3\4\1\107\2\4"+
    "\1\0\3\4\1\110\3\4\1\0\3\4\22\0\2\4"+
    "\1\0\1\66\6\0\1\4\3\0\1\111\5\4\1\112"+
    "\1\4\1\0\6\4\1\0\7\4\1\0\3\4\22\0"+
    "\2\4\1\0\1\66\6\0\1\4\3\0\10\4\1\113"+
    "\1\114\1\115\4\4\1\0\7\4\1\0\3\4\22\0"+
    "\2\4\1\0\1\66\6\0\1\4\3\0\4\4\1\116"+
    "\1\4\1\117\1\120\1\0\4\4\1\121\1\4\1\0"+
    "\7\4\1\0\3\4\22\0\2\4\1\0\1\66\6\0"+
    "\1\4\3\0\1\4\1\122\1\123\1\124\3\4\1\125"+
    "\1\0\1\4\1\126\3\4\1\127\1\0\7\4\1\0"+
    "\3\4\22\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\10\4\1\0\4\4\1\130\1\4\1\131\1\132\6\4"+
    "\1\0\3\4\40\0\1\133\3\0\1\134\50\0\2\4"+
    "\1\0\1\66\6\0\1\4\3\0\1\135\3\4\1\136"+
    "\3\4\1\0\6\4\1\0\7\4\1\0\3\4\22\0"+
    "\2\4\1\0\1\66\6\0\1\4\3\0\1\137\3\4"+
    "\1\140\3\4\1\0\4\4\1\141\1\4\1\0\7\4"+
    "\1\0\3\4\22\0\2\4\1\0\1\66\6\0\1\4"+
    "\3\0\1\142\7\4\1\0\4\4\1\143\1\4\1\144"+
    "\1\145\6\4\1\0\3\4\22\0\2\4\1\0\1\66"+
    "\6\0\1\4\3\0\2\4\1\146\1\147\1\150\1\151"+
    "\2\4\1\0\6\4\1\0\7\4\1\0\3\4\22\0"+
    "\2\4\1\0\1\66\6\0\1\4\3\0\1\152\7\4"+
    "\1\0\4\4\1\153\1\4\1\0\7\4\1\0\3\4"+
    "\45\0\1\154\2\0\2\155\1\156\42\0\2\4\1\0"+
    "\1\66\6\0\1\4\3\0\5\4\1\157\2\4\1\155"+
    "\1\160\1\161\4\4\1\0\7\4\1\0\3\4\22\0"+
    "\2\4\1\0\1\66\6\0\1\4\3\0\1\162\7\4"+
    "\1\0\4\4\1\163\1\4\1\0\7\4\1\0\3\4"+
    "\22\0\2\4\1\0\1\66\6\0\1\4\3\0\3\4"+
    "\1\164\1\165\1\4\1\166\1\4\1\0\6\4\1\0"+
    "\7\4\1\0\3\4\22\0\2\4\1\0\1\66\6\0"+
    "\1\4\3\0\10\4\1\0\4\4\1\167\1\4\1\0"+
    "\7\4\1\0\3\4\22\0\2\4\1\0\1\66\6\0"+
    "\1\4\3\0\10\4\1\0\4\4\1\170\1\4\1\0"+
    "\7\4\1\0\3\4\22\0\2\4\1\0\1\66\6\0"+
    "\1\4\3\0\10\4\1\0\3\4\1\171\2\4\1\172"+
    "\1\173\6\4\1\0\3\4\73\0\1\174\73\0\1\175"+
    "\73\0\1\176\15\0\1\177\54\0\1\200\102\0\1\201"+
    "\62\0\1\202\72\0\1\203\72\0\1\204\14\0\1\205"+
    "\1\206\54\0\1\207\15\0\1\210\11\63\2\0\2\63"+
    "\1\0\55\63\11\0\1\211\62\0\2\4\10\0\1\4"+
    "\3\0\10\4\1\0\6\4\1\0\7\4\1\0\3\4"+
    "\23\0\1\5\72\0\1\212\14\0\2\212\3\0\2\212"+
    "\4\0\1\212\2\0\1\212\37\0\1\213\72\0\1\214"+
    "\4\0\2\215\62\0\12\74\1\216\2\74\1\217\55\74"+
    "\16\0\1\220\55\0\2\4\1\0\1\66\6\0\1\4"+
    "\3\0\10\4\1\221\1\222\5\4\1\0\7\4\1\0"+
    "\3\4\22\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\2\4\1\223\5\4\1\0\2\4\1\224\3\4\1\0"+
    "\7\4\1\0\3\4\22\0\2\4\1\0\1\66\6\0"+
    "\1\4\3\0\1\4\1\225\6\4\1\0\6\4\1\226"+
    "\1\227\6\4\1\0\3\4\22\0\2\4\1\0\1\66"+
    "\6\0\1\4\3\0\10\4\1\230\1\231\5\4\1\0"+
    "\7\4\1\0\3\4\22\0\2\4\1\0\1\66\6\0"+
    "\1\4\3\0\10\4\1\0\1\4\1\232\4\4\1\0"+
    "\7\4\1\0\3\4\22\0\2\4\1\0\1\66\6\0"+
    "\1\4\3\0\3\4\1\233\4\4\1\0\6\4\1\0"+
    "\7\4\1\0\3\4\22\0\2\4\1\0\1\66\6\0"+
    "\1\4\3\0\4\4\1\234\3\4\1\0\6\4\1\0"+
    "\7\4\1\0\3\4\22\0\2\4\1\0\1\66\6\0"+
    "\1\4\3\0\10\4\1\235\1\236\5\4\1\0\1\4"+
    "\1\237\5\4\1\0\3\4\22\0\2\4\1\0\1\66"+
    "\6\0\1\4\3\0\1\240\7\4\1\0\6\4\1\0"+
    "\7\4\1\0\3\4\22\0\2\4\1\0\1\66\6\0"+
    "\1\4\3\0\10\4\1\0\6\4\1\0\2\4\1\241"+
    "\4\4\1\0\3\4\22\0\2\4\1\0\1\66\6\0"+
    "\1\242\3\0\1\4\1\243\1\244\5\4\1\0\1\4"+
    "\1\245\4\4\1\0\5\4\1\246\1\4\1\0\1\4"+
    "\1\242\1\247\22\0\2\4\1\0\1\66\6\0\1\4"+
    "\3\0\10\4\1\0\1\4\1\250\4\4\1\251\1\252"+
    "\6\4\1\0\3\4\40\0\1\253\54\0\2\4\1\0"+
    "\1\66\6\0\1\4\3\0\1\254\7\4\1\0\6\4"+
    "\1\0\7\4\1\0\3\4\22\0\2\4\1\0\1\66"+
    "\6\0\1\4\3\0\2\4\1\255\5\4\1\0\6\4"+
    "\1\0\7\4\1\0\3\4\22\0\2\4\1\0\1\66"+
    "\6\0\1\4\3\0\10\4\1\0\1\4\1\256\4\4"+
    "\1\0\7\4\1\0\3\4\22\0\2\4\1\0\1\66"+
    "\6\0\1\4\3\0\7\4\1\257\1\0\6\4\1\0"+
    "\7\4\1\0\3\4\22\0\2\4\1\0\1\66\6\0"+
    "\1\4\3\0\10\4\1\0\4\4\1\260\1\4\1\0"+
    "\7\4\1\0\3\4\22\0\2\4\1\0\1\66\6\0"+
    "\1\4\3\0\3\4\1\261\4\4\1\0\6\4\1\0"+
    "\7\4\1\0\3\4\22\0\2\4\1\0\1\66\6\0"+
    "\1\4\3\0\1\4\1\262\6\4\1\0\6\4\1\0"+
    "\7\4\1\0\3\4\22\0\2\4\1\0\1\66\6\0"+
    "\1\4\3\0\3\4\1\263\4\4\1\0\6\4\1\0"+
    "\7\4\1\0\3\4\22\0\2\4\1\0\1\66\6\0"+
    "\1\4\3\0\7\4\1\264\1\0\6\4\1\265\1\266"+
    "\6\4\1\0\3\4\22\0\2\4\1\0\1\66\6\0"+
    "\1\4\3\0\10\4\1\0\2\4\1\267\3\4\1\0"+
    "\7\4\1\0\3\4\22\0\2\4\1\0\1\66\6\0"+
    "\1\4\3\0\10\4\1\270\1\271\3\4\1\272\1\4"+
    "\1\0\7\4\1\0\3\4\22\0\2\4\1\0\1\66"+
    "\6\0\1\4\3\0\10\4\1\0\4\4\1\273\1\4"+
    "\1\0\7\4\1\0\3\4\65\0\1\274\27\0\2\4"+
    "\1\0\1\66\6\0\1\4\3\0\10\4\1\0\6\4"+
    "\1\0\5\4\1\275\1\4\1\0\3\4\47\0\1\276"+
    "\12\0\1\277\66\0\1\300\36\0\2\4\1\0\1\66"+
    "\6\0\1\4\3\0\7\4\1\301\1\0\6\4\1\0"+
    "\2\4\1\302\4\4\1\0\3\4\22\0\2\4\1\0"+
    "\1\66\6\0\1\4\3\0\10\4\1\0\5\4\1\303"+
    "\1\0\7\4\1\0\3\4\22\0\2\4\1\0\1\66"+
    "\6\0\1\4\3\0\10\4\1\0\6\4\1\0\6\4"+
    "\1\304\1\0\3\4\22\0\2\4\1\0\1\66\6\0"+
    "\1\4\3\0\7\4\1\305\1\0\6\4\1\0\7\4"+
    "\1\0\3\4\22\0\2\4\1\0\1\66\6\0\1\4"+
    "\3\0\2\4\1\306\5\4\1\0\6\4\1\0\7\4"+
    "\1\0\3\4\22\0\2\4\1\0\1\66\6\0\1\4"+
    "\3\0\1\4\1\307\5\4\1\310\1\0\6\4\1\0"+
    "\7\4\1\0\3\4\61\0\1\311\33\0\2\4\1\0"+
    "\1\66\6\0\1\4\3\0\10\4\1\0\6\4\1\0"+
    "\1\4\1\312\5\4\1\0\3\4\22\0\2\4\1\0"+
    "\1\66\6\0\1\4\3\0\10\4\1\0\3\4\1\313"+
    "\2\4\1\0\7\4\1\0\3\4\22\0\2\4\1\314"+
    "\1\66\5\0\1\314\1\315\2\314\1\0\10\4\1\0"+
    "\6\4\1\0\7\4\1\0\3\4\22\0\2\4\1\0"+
    "\1\66\6\0\1\4\3\0\2\4\1\316\5\4\1\0"+
    "\6\4\1\0\7\4\1\0\3\4\22\0\2\4\1\0"+
    "\1\66\6\0\1\4\3\0\10\4\1\0\6\4\1\0"+
    "\1\4\1\317\5\4\1\0\3\4\22\0\2\4\1\0"+
    "\1\66\6\0\1\4\3\0\10\4\1\0\2\4\1\320"+
    "\1\4\1\321\1\4\1\0\7\4\1\0\3\4\42\0"+
    "\1\322\52\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\2\4\1\323\5\4\1\0\6\4\1\0\7\4\1\0"+
    "\3\4\22\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\2\4\1\324\5\4\1\0\1\4\1\325\4\4\1\0"+
    "\7\4\1\0\3\4\22\0\2\4\1\0\1\66\6\0"+
    "\1\4\3\0\2\4\1\326\5\4\1\0\6\4\1\0"+
    "\7\4\1\0\3\4\22\0\2\4\1\0\1\66\6\0"+
    "\1\4\3\0\6\4\1\327\1\4\1\0\4\4\1\330"+
    "\1\4\1\331\1\332\6\4\1\0\3\4\22\0\2\4"+
    "\1\0\1\66\6\0\1\4\3\0\2\4\1\333\5\4"+
    "\1\0\6\4\1\0\7\4\1\0\3\4\22\0\2\4"+
    "\1\0\1\66\6\0\1\4\3\0\1\4\1\334\6\4"+
    "\1\0\6\4\1\0\7\4\1\0\3\4\22\0\2\4"+
    "\1\0\1\66\6\0\1\4\3\0\3\4\1\335\4\4"+
    "\1\0\6\4\1\0\7\4\1\0\3\4\22\0\2\4"+
    "\1\0\1\66\6\0\1\4\3\0\10\4\1\0\2\4"+
    "\1\336\3\4\1\0\7\4\1\0\3\4\22\0\2\4"+
    "\1\0\1\66\6\0\1\4\3\0\1\337\7\4\1\0"+
    "\6\4\1\340\1\341\6\4\1\0\3\4\42\0\1\342"+
    "\52\0\2\4\1\0\1\66\6\0\1\4\3\0\2\4"+
    "\1\343\5\4\1\0\6\4\1\0\7\4\1\0\3\4"+
    "\23\0\1\212\1\0\1\70\1\344\1\345\10\0\2\212"+
    "\3\0\2\212\4\0\1\212\2\0\1\212\37\0\1\213"+
    "\1\0\1\71\12\0\1\72\55\0\1\214\1\0\1\215"+
    "\70\0\1\214\102\0\1\216\77\0\1\346\16\0\2\347"+
    "\34\0\2\4\1\0\1\66\6\0\1\4\3\0\1\350"+
    "\7\4\1\0\6\4\1\347\1\351\6\4\1\0\3\4"+
    "\22\0\2\4\1\0\1\66\6\0\1\4\3\0\3\4"+
    "\1\352\4\4\1\0\6\4\1\0\7\4\1\0\3\4"+
    "\22\0\2\4\1\0\1\66\6\0\1\4\3\0\1\353"+
    "\7\4\1\0\6\4\1\0\7\4\1\0\3\4\42\0"+
    "\1\354\52\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\2\4\1\355\5\4\1\0\6\4\1\0\7\4\1\0"+
    "\3\4\40\0\1\356\54\0\2\4\1\0\1\66\6\0"+
    "\1\4\3\0\1\357\7\4\1\0\6\4\1\0\7\4"+
    "\1\0\3\4\22\0\2\4\1\0\1\66\6\0\1\4"+
    "\3\0\10\4\1\360\1\361\5\4\1\0\7\4\1\0"+
    "\3\4\22\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\10\4\1\0\6\4\1\0\5\4\1\362\1\4\1\0"+
    "\3\4\22\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\1\363\7\4\1\0\6\4\1\0\7\4\1\0\3\4"+
    "\67\0\2\364\24\0\2\4\1\0\1\66\6\0\1\4"+
    "\3\0\10\4\1\0\6\4\1\0\7\4\1\364\1\365"+
    "\2\4\22\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\10\4\1\0\6\4\1\0\1\4\1\366\5\4\1\0"+
    "\3\4\22\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\10\4\1\0\1\4\1\367\4\4\1\0\7\4\1\0"+
    "\3\4\22\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\1\370\7\4\1\0\6\4\1\0\7\4\1\0\3\4"+
    "\22\0\2\4\1\0\1\66\6\0\1\4\3\0\1\371"+
    "\7\4\1\0\6\4\1\0\7\4\1\0\3\4\22\0"+
    "\2\4\1\0\1\66\6\0\1\4\3\0\10\4\1\0"+
    "\4\4\1\372\1\4\1\0\7\4\1\0\3\4\22\0"+
    "\2\4\1\0\1\66\6\0\1\4\3\0\4\4\1\373"+
    "\3\4\1\0\6\4\1\0\7\4\1\0\3\4\22\0"+
    "\2\4\1\0\1\66\6\0\1\4\3\0\6\4\1\374"+
    "\1\4\1\0\6\4\1\0\7\4\1\0\3\4\22\0"+
    "\2\4\1\0\1\66\6\0\1\4\3\0\4\4\1\375"+
    "\3\4\1\0\6\4\1\0\7\4\1\0\3\4\22\0"+
    "\2\4\1\0\1\66\6\0\1\4\3\0\10\4\1\0"+
    "\6\4\1\0\1\4\1\376\5\4\1\0\3\4\50\0"+
    "\2\377\43\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\10\4\1\377\1\u0100\5\4\1\0\7\4\1\0\3\4"+
    "\22\0\2\4\1\0\1\66\6\0\1\4\3\0\10\4"+
    "\1\0\6\4\1\u0101\1\u0102\6\4\1\0\3\4\22\0"+
    "\2\4\1\0\1\66\6\0\1\4\3\0\1\4\1\u0103"+
    "\6\4\1\0\6\4\1\0\7\4\1\0\3\4\22\0"+
    "\2\4\1\0\1\66\6\0\1\4\3\0\10\4\1\u0104"+
    "\1\234\5\4\1\0\7\4\1\0\3\4\22\0\2\4"+
    "\1\0\1\66\6\0\1\4\3\0\6\4\1\u0105\1\4"+
    "\1\0\6\4\1\0\7\4\1\0\3\4\22\0\2\4"+
    "\1\0\1\66\6\0\1\4\3\0\1\u0106\7\4\1\0"+
    "\6\4\1\0\7\4\1\0\3\4\22\0\2\4\1\0"+
    "\1\66\6\0\1\4\3\0\6\4\1\u0107\1\4\1\0"+
    "\6\4\1\0\7\4\1\0\3\4\46\0\1\u0108\46\0"+
    "\2\4\1\0\1\66\6\0\1\4\3\0\6\4\1\u0109"+
    "\1\4\1\0\6\4\1\0\7\4\1\0\3\4\22\0"+
    "\2\4\1\u010a\1\66\5\0\1\u010a\1\u010b\2\u010a\1\0"+
    "\10\4\1\0\6\4\1\0\7\4\1\0\3\4\42\0"+
    "\1\u010c\52\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\2\4\1\u010d\5\4\1\0\6\4\1\0\7\4\1\0"+
    "\3\4\22\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\3\4\1\u010e\4\4\1\0\6\4\1\0\7\4\1\0"+
    "\3\4\22\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\10\4\1\0\6\4\1\0\2\4\1\u010f\4\4\1\0"+
    "\3\4\57\0\2\u0110\34\0\2\4\1\0\1\66\6\0"+
    "\1\4\3\0\10\4\1\0\6\4\1\u0110\1\u0111\6\4"+
    "\1\0\3\4\40\0\1\u0112\100\0\1\u0113\66\0\1\u0114"+
    "\52\0\2\4\1\0\1\66\6\0\1\4\3\0\1\u0115"+
    "\7\4\1\0\6\4\1\0\7\4\1\0\3\4\22\0"+
    "\2\4\1\0\1\66\6\0\1\4\3\0\6\4\1\u0116"+
    "\1\4\1\0\6\4\1\0\7\4\1\0\3\4\22\0"+
    "\2\4\1\0\1\66\6\0\1\4\3\0\2\4\1\u0117"+
    "\5\4\1\0\6\4\1\0\7\4\1\0\3\4\22\0"+
    "\2\4\1\0\1\66\6\0\1\4\3\0\7\4\1\u0118"+
    "\1\0\6\4\1\0\7\4\1\0\3\4\22\0\2\4"+
    "\1\0\1\66\6\0\1\4\3\0\7\4\1\u0119\1\0"+
    "\6\4\1\0\7\4\1\0\3\4\22\0\2\4\1\0"+
    "\1\66\6\0\1\4\3\0\2\4\1\u011a\3\4\1\u011b"+
    "\1\4\1\0\6\4\1\0\7\4\1\0\3\4\57\0"+
    "\2\u011c\34\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\10\4\1\0\6\4\1\u011c\1\u011d\6\4\1\0\3\4"+
    "\22\0\2\4\1\0\1\66\6\0\1\4\3\0\1\u011e"+
    "\7\4\1\0\6\4\1\0\7\4\1\0\3\4\24\0"+
    "\1\314\6\0\4\314\1\0\1\u011f\54\0\2\4\1\314"+
    "\1\66\5\0\1\314\1\315\2\314\1\0\1\u0120\7\4"+
    "\1\0\6\4\1\0\7\4\1\0\3\4\22\0\2\4"+
    "\1\0\1\66\6\0\1\4\3\0\10\4\1\0\6\4"+
    "\1\u0121\1\u0122\6\4\1\0\3\4\22\0\2\4\1\0"+
    "\1\66\6\0\1\4\3\0\10\4\1\0\6\4\1\0"+
    "\3\4\1\u0123\3\4\1\0\3\4\22\0\2\4\1\0"+
    "\1\66\6\0\1\4\3\0\7\4\1\u0124\1\0\6\4"+
    "\1\0\7\4\1\0\3\4\40\0\1\u0125\54\0\2\4"+
    "\1\0\1\66\6\0\1\4\3\0\1\u0126\7\4\1\0"+
    "\6\4\1\0\7\4\1\0\3\4\22\0\2\4\1\0"+
    "\1\66\6\0\1\4\3\0\1\u0127\7\4\1\0\6\4"+
    "\1\0\7\4\1\0\3\4\22\0\2\4\1\0\1\66"+
    "\6\0\1\4\3\0\10\4\1\0\4\4\1\u0128\1\4"+
    "\1\0\7\4\1\0\3\4\22\0\2\4\1\0\1\66"+
    "\6\0\1\4\3\0\10\4\1\0\6\4\1\0\1\4"+
    "\1\u0129\5\4\1\0\3\4\22\0\2\4\1\0\1\66"+
    "\6\0\1\4\3\0\1\4\1\u012a\1\u012b\5\4\1\0"+
    "\6\4\1\0\7\4\1\0\3\4\34\0\1\u012c\34\0"+
    "\1\u012c\23\0\2\4\1\0\1\66\6\0\1\u012d\3\0"+
    "\10\4\1\0\6\4\1\0\7\4\1\0\1\4\1\u012d"+
    "\1\4\22\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\10\4\1\0\6\4\1\0\7\4\1\u012e\1\u012f\2\4"+
    "\22\0\2\4\1\0\1\66\6\0\1\4\3\0\10\4"+
    "\1\0\1\4\1\u0130\4\4\1\0\7\4\1\0\3\4"+
    "\47\0\1\u0131\45\0\2\4\1\0\1\66\6\0\1\4"+
    "\3\0\7\4\1\u0132\1\0\6\4\1\0\7\4\1\0"+
    "\3\4\54\0\1\u0133\40\0\2\4\1\0\1\66\6\0"+
    "\1\4\3\0\10\4\1\0\3\4\1\u0134\2\4\1\0"+
    "\7\4\1\0\3\4\40\0\1\u0135\55\0\1\u0136\14\0"+
    "\2\u0136\3\0\2\u0136\4\0\1\u0136\2\0\1\u0136\61\0"+
    "\1\u0137\47\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\5\4\1\u0138\2\4\1\0\6\4\1\0\7\4\1\0"+
    "\3\4\22\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\10\4\1\0\6\4\1\0\3\4\1\u0139\3\4\1\0"+
    "\3\4\22\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\10\4\1\0\6\4\1\0\2\4\1\u013a\4\4\1\0"+
    "\3\4\42\0\1\u013b\52\0\2\4\1\0\1\66\6\0"+
    "\1\4\3\0\2\4\1\u013c\5\4\1\0\6\4\1\0"+
    "\7\4\1\0\3\4\22\0\2\4\1\0\1\66\6\0"+
    "\1\4\3\0\10\4\1\0\6\4\1\u013d\1\u013e\6\4"+
    "\1\0\3\4\22\0\2\4\1\0\1\66\6\0\1\4"+
    "\3\0\1\u013f\7\4\1\0\6\4\1\0\7\4\1\0"+
    "\3\4\22\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\3\4\1\u0140\4\4\1\0\6\4\1\0\7\4\1\0"+
    "\3\4\22\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\3\4\1\u0141\4\4\1\0\6\4\1\0\7\4\1\0"+
    "\3\4\22\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\3\4\1\u0142\4\4\1\0\6\4\1\0\7\4\1\0"+
    "\3\4\22\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\10\4\1\0\6\4\1\0\5\4\1\u0143\1\4\1\0"+
    "\3\4\22\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\1\u0144\7\4\1\0\6\4\1\0\7\4\1\0\3\4"+
    "\22\0\2\4\1\0\1\66\6\0\1\4\3\0\1\u0145"+
    "\7\4\1\0\6\4\1\0\7\4\1\0\3\4\40\0"+
    "\1\u0146\54\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\1\u0147\7\4\1\0\6\4\1\0\7\4\1\0\3\4"+
    "\47\0\1\u0148\45\0\2\4\1\0\1\66\6\0\1\4"+
    "\3\0\7\4\1\u0149\1\0\6\4\1\0\7\4\1\0"+
    "\3\4\22\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\2\4\1\u014a\5\4\1\0\6\4\1\0\7\4\1\0"+
    "\3\4\40\0\1\u014b\54\0\2\4\1\0\1\66\6\0"+
    "\1\4\3\0\2\4\1\u014c\5\4\1\0\6\4\1\0"+
    "\7\4\1\0\3\4\22\0\2\4\1\0\1\66\6\0"+
    "\1\4\3\0\10\4\1\u014d\1\u014e\5\4\1\0\2\4"+
    "\1\u014f\4\4\1\0\3\4\22\0\2\4\1\0\1\66"+
    "\6\0\1\4\3\0\10\4\1\0\6\4\1\0\3\4"+
    "\1\u0150\3\4\1\0\3\4\50\0\2\u0151\43\0\2\4"+
    "\1\0\1\66\6\0\1\4\3\0\10\4\1\u0151\1\u0152"+
    "\5\4\1\0\7\4\1\0\3\4\24\0\1\u010a\6\0"+
    "\4\u010a\3\0\1\u0153\52\0\2\4\1\u010a\1\66\5\0"+
    "\1\u010a\1\u010b\2\u010a\1\0\2\4\1\u0154\5\4\1\0"+
    "\6\4\1\0\7\4\1\0\3\4\43\0\1\u0155\51\0"+
    "\2\4\1\0\1\66\6\0\1\4\3\0\3\4\1\u0156"+
    "\4\4\1\0\6\4\1\0\7\4\1\0\3\4\22\0"+
    "\2\4\1\0\1\66\6\0\1\4\3\0\2\4\1\u0157"+
    "\5\4\1\0\6\4\1\0\7\4\1\0\3\4\42\0"+
    "\1\u0158\52\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\2\4\1\u0159\5\4\1\0\6\4\1\0\7\4\1\0"+
    "\3\4\41\0\1\u015a\74\0\1\u015b\112\0\1\u015c\31\0"+
    "\2\4\1\0\1\66\6\0\1\4\3\0\1\4\1\u015d"+
    "\6\4\1\0\6\4\1\0\7\4\1\0\3\4\22\0"+
    "\2\4\1\0\1\66\6\0\1\4\3\0\3\4\1\u015e"+
    "\4\4\1\0\6\4\1\0\7\4\1\0\3\4\22\0"+
    "\2\4\1\0\1\66\6\0\1\4\3\0\10\4\1\0"+
    "\6\4\1\0\3\4\1\u015f\3\4\1\0\3\4\22\0"+
    "\2\4\1\0\1\66\6\0\1\4\3\0\6\4\1\u0160"+
    "\1\4\1\0\6\4\1\0\7\4\1\0\3\4\22\0"+
    "\2\4\1\0\1\66\6\0\1\4\3\0\6\4\1\u0161"+
    "\1\4\1\0\6\4\1\0\7\4\1\0\3\4\22\0"+
    "\2\4\1\0\1\66\6\0\1\4\3\0\10\4\1\0"+
    "\6\4\1\0\3\4\1\u0162\3\4\1\0\3\4\42\0"+
    "\1\u0163\52\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\2\4\1\u0164\5\4\1\0\6\4\1\0\7\4\1\0"+
    "\3\4\22\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\3\4\1\u0165\4\4\1\0\6\4\1\0\7\4\1\0"+
    "\3\4\47\0\1\u0166\45\0\2\4\1\0\1\66\6\0"+
    "\1\4\3\0\7\4\1\u0167\1\0\6\4\1\0\7\4"+
    "\1\0\3\4\52\0\1\u0168\42\0\2\4\1\0\1\66"+
    "\6\0\1\4\3\0\10\4\1\0\1\4\1\u0169\4\4"+
    "\1\0\7\4\1\0\3\4\22\0\2\4\1\0\1\66"+
    "\6\0\1\4\3\0\1\u016a\7\4\1\0\6\4\1\0"+
    "\7\4\1\0\3\4\61\0\1\u016b\33\0\2\4\1\0"+
    "\1\66\6\0\1\4\3\0\10\4\1\0\6\4\1\0"+
    "\1\4\1\u016c\5\4\1\0\3\4\22\0\2\4\1\0"+
    "\1\66\6\0\1\4\3\0\3\4\1\u016d\4\4\1\0"+
    "\6\4\1\0\7\4\1\0\3\4\22\0\2\4\1\0"+
    "\1\66\6\0\1\4\3\0\10\4\1\0\6\4\1\0"+
    "\5\4\1\u016e\1\4\1\0\3\4\22\0\2\4\1\0"+
    "\1\66\6\0\1\4\3\0\1\u016f\7\4\1\0\6\4"+
    "\1\0\7\4\1\0\3\4\22\0\2\4\1\0\1\66"+
    "\6\0\1\4\3\0\1\u0170\7\4\1\0\6\4\1\0"+
    "\7\4\1\0\3\4\46\0\1\u0171\46\0\2\4\1\0"+
    "\1\66\6\0\1\4\3\0\6\4\1\u0172\1\4\1\0"+
    "\6\4\1\0\7\4\1\0\3\4\46\0\1\u0173\46\0"+
    "\2\4\1\0\1\66\6\0\1\4\3\0\6\4\1\u0174"+
    "\1\4\1\0\6\4\1\0\7\4\1\0\3\4\40\0"+
    "\1\u0175\54\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\1\u0176\7\4\1\0\6\4\1\0\7\4\1\0\3\4"+
    "\23\0\1\u0177\4\0\2\u0178\64\0\1\u0136\1\0\1\345"+
    "\1\344\11\0\2\u0136\3\0\2\u0136\4\0\1\u0136\2\0"+
    "\1\u0136\36\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\2\4\1\u0179\5\4\1\0\6\4\1\0\7\4\1\0"+
    "\3\4\46\0\1\u017a\46\0\2\4\1\0\1\66\6\0"+
    "\1\4\3\0\6\4\1\u017b\1\4\1\0\6\4\1\0"+
    "\7\4\1\0\3\4\52\0\1\u017c\42\0\2\4\1\0"+
    "\1\66\6\0\1\4\3\0\10\4\1\0\1\4\1\u017d"+
    "\4\4\1\0\7\4\1\0\3\4\22\0\2\4\1\0"+
    "\1\66\6\0\1\4\3\0\10\4\1\0\2\4\1\u017e"+
    "\3\4\1\0\7\4\1\0\3\4\22\0\2\4\1\0"+
    "\1\66\6\0\1\4\3\0\10\4\1\u017f\1\u0180\5\4"+
    "\1\0\7\4\1\0\3\4\22\0\2\4\1\0\1\66"+
    "\6\0\1\4\3\0\10\4\1\0\2\4\1\u0181\3\4"+
    "\1\0\7\4\1\0\3\4\22\0\2\4\1\0\1\66"+
    "\6\0\1\4\3\0\10\4\1\0\1\4\1\u0182\4\4"+
    "\1\0\7\4\1\0\3\4\22\0\2\4\1\0\1\66"+
    "\6\0\1\4\3\0\1\u0183\7\4\1\0\6\4\1\0"+
    "\7\4\1\0\3\4\22\0\2\4\1\0\1\66\6\0"+
    "\1\4\3\0\4\4\1\u0184\3\4\1\0\6\4\1\0"+
    "\7\4\1\0\3\4\22\0\2\4\1\0\1\66\6\0"+
    "\1\4\3\0\10\4\1\0\6\4\1\u0185\1\u0186\6\4"+
    "\1\0\3\4\50\0\2\u0187\43\0\2\4\1\0\1\66"+
    "\6\0\1\4\3\0\10\4\1\u0187\1\u0188\5\4\1\0"+
    "\7\4\1\0\3\4\22\0\2\4\1\0\1\66\6\0"+
    "\1\4\3\0\2\4\1\u0189\5\4\1\0\6\4\1\0"+
    "\7\4\1\0\3\4\40\0\1\u018a\54\0\2\4\1\0"+
    "\1\66\6\0\1\4\3\0\1\u018b\7\4\1\0\6\4"+
    "\1\0\7\4\1\0\3\4\54\0\1\u018c\40\0\2\4"+
    "\1\0\1\66\6\0\1\4\3\0\10\4\1\0\3\4"+
    "\1\u018d\2\4\1\0\7\4\1\0\3\4\46\0\1\u018e"+
    "\46\0\2\4\1\0\1\66\6\0\1\4\3\0\6\4"+
    "\1\u018f\1\4\1\0\6\4\1\0\7\4\1\0\3\4"+
    "\40\0\1\u0190\54\0\2\4\1\0\1\66\6\0\1\4"+
    "\3\0\1\u0191\7\4\1\0\6\4\1\0\7\4\1\0"+
    "\3\4\42\0\1\u0192\76\0\1\u0193\106\0\1\u0194\32\0"+
    "\2\4\1\0\1\66\6\0\1\4\3\0\2\4\1\u0195"+
    "\5\4\1\0\6\4\1\0\7\4\1\0\3\4\22\0"+
    "\2\4\1\0\1\66\6\0\1\4\3\0\6\4\1\u0196"+
    "\1\4\1\0\6\4\1\0\7\4\1\0\3\4\22\0"+
    "\2\4\1\0\1\66\6\0\1\4\3\0\10\4\1\0"+
    "\6\4\1\0\2\4\1\u0197\4\4\1\0\3\4\22\0"+
    "\2\4\1\0\1\66\6\0\1\4\3\0\3\4\1\u0198"+
    "\4\4\1\0\6\4\1\0\7\4\1\0\3\4\50\0"+
    "\2\u0199\43\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\10\4\1\u0199\1\u019a\5\4\1\0\7\4\1\0\3\4"+
    "\22\0\2\4\1\0\1\66\6\0\1\4\3\0\10\4"+
    "\1\u019b\1\u019c\5\4\1\0\7\4\1\0\3\4\50\0"+
    "\2\u019d\43\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\10\4\1\u019d\1\u019e\5\4\1\0\7\4\1\0\3\4"+
    "\22\0\2\4\1\0\1\66\6\0\1\4\3\0\6\4"+
    "\1\u019f\1\4\1\0\6\4\1\0\7\4\1\0\3\4"+
    "\40\0\1\u01a0\54\0\2\4\1\0\1\66\6\0\1\4"+
    "\3\0\1\u01a1\7\4\1\0\6\4\1\0\7\4\1\0"+
    "\3\4\22\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\10\4\1\0\6\4\1\u01a2\1\u01a3\6\4\1\0\3\4"+
    "\22\0\2\4\1\0\1\66\6\0\1\4\3\0\6\4"+
    "\1\u01a4\1\4\1\0\6\4\1\0\7\4\1\0\3\4"+
    "\22\0\2\4\1\0\1\66\6\0\1\4\3\0\10\4"+
    "\1\0\2\4\1\u01a5\3\4\1\0\7\4\1\0\3\4"+
    "\22\0\2\4\1\0\1\66\6\0\1\4\3\0\1\4"+
    "\1\u01a6\6\4\1\0\6\4\1\0\7\4\1\0\3\4"+
    "\42\0\1\u01a7\52\0\2\4\1\0\1\66\6\0\1\4"+
    "\3\0\2\4\1\u01a8\5\4\1\0\6\4\1\0\7\4"+
    "\1\0\3\4\61\0\1\u01a9\33\0\2\4\1\0\1\66"+
    "\6\0\1\4\3\0\10\4\1\0\6\4\1\0\1\4"+
    "\1\u01aa\5\4\1\0\3\4\23\0\1\u0177\1\0\1\u0178"+
    "\70\0\1\u0177\71\0\2\4\1\0\1\66\6\0\1\4"+
    "\3\0\10\4\1\0\6\4\1\u01ab\1\u01ac\6\4\1\0"+
    "\3\4\52\0\1\u01ad\42\0\2\4\1\0\1\66\6\0"+
    "\1\4\3\0\10\4\1\0\1\4\1\u01ae\4\4\1\0"+
    "\7\4\1\0\3\4\46\0\1\u01af\46\0\2\4\1\0"+
    "\1\66\6\0\1\4\3\0\6\4\1\u01b0\1\4\1\0"+
    "\6\4\1\0\7\4\1\0\3\4\40\0\1\u01b1\54\0"+
    "\2\4\1\0\1\66\6\0\1\4\3\0\1\u01b2\7\4"+
    "\1\0\6\4\1\0\7\4\1\0\3\4\22\0\2\4"+
    "\1\0\1\66\6\0\1\4\3\0\10\4\1\u01b3\1\u01b4"+
    "\5\4\1\0\7\4\1\0\3\4\22\0\2\4\1\0"+
    "\1\66\6\0\1\4\3\0\1\u01b5\7\4\1\0\6\4"+
    "\1\0\7\4\1\0\3\4\55\0\1\u01b6\37\0\2\4"+
    "\1\0\1\66\6\0\1\4\3\0\10\4\1\0\4\4"+
    "\1\u01b7\1\4\1\0\7\4\1\0\3\4\53\0\1\u01b8"+
    "\41\0\2\4\1\0\1\66\6\0\1\4\3\0\10\4"+
    "\1\0\2\4\1\u01b9\3\4\1\0\7\4\1\0\3\4"+
    "\40\0\1\u01ba\54\0\2\4\1\0\1\66\6\0\1\4"+
    "\3\0\1\u01bb\7\4\1\0\6\4\1\0\7\4\1\0"+
    "\3\4\41\0\1\u01bc\53\0\2\4\1\0\1\66\6\0"+
    "\1\4\3\0\1\4\1\u01bd\6\4\1\0\6\4\1\0"+
    "\7\4\1\0\3\4\53\0\1\u01be\41\0\2\4\1\0"+
    "\1\66\6\0\1\4\3\0\10\4\1\0\2\4\1\u01bf"+
    "\3\4\1\0\7\4\1\0\3\4\42\0\1\u01c0\70\0"+
    "\1\u01c1\54\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\2\4\1\u01c2\5\4\1\0\6\4\1\0\7\4\1\0"+
    "\3\4\22\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\1\u01c3\7\4\1\0\6\4\1\0\7\4\1\0\3\4"+
    "\22\0\2\4\1\0\1\66\6\0\1\4\3\0\1\u01c4"+
    "\7\4\1\0\6\4\1\0\7\4\1\0\3\4\40\0"+
    "\1\u01c5\54\0\2\4\1\0\1\66\6\0\1\4\3\0"+
    "\1\u01c6\7\4\1\0\6\4\1\0\7\4\1\0\3\4"+
    "\22\0\2\4\1\0\1\66\6\0\1\4\3\0\10\4"+
    "\1\0\1\4\1\u01c7\4\4\1\0\7\4\1\0\3\4"+
    "\43\0\1\u01c8\51\0\2\4\1\0\1\66\6\0\1\4"+
    "\3\0\3\4\1\u01c9\4\4\1\0\6\4\1\0\7\4"+
    "\1\0\3\4\41\0\1\u01ca\53\0\2\4\1\0\1\66"+
    "\6\0\1\4\3\0\1\4\1\u01cb\6\4\1\0\6\4"+
    "\1\0\7\4\1\0\3\4\22\0\2\4\1\0\1\66"+
    "\6\0\1\4\3\0\4\4\1\u01cc\3\4\1\0\6\4"+
    "\1\0\7\4\1\0\3\4\22\0\2\4\1\0\1\66"+
    "\6\0\1\4\3\0\2\4\1\u01cd\5\4\1\0\6\4"+
    "\1\0\7\4\1\0\3\4\40\0\1\u01ce\54\0\2\4"+
    "\1\0\1\66\6\0\1\4\3\0\1\u01cf\7\4\1\0"+
    "\6\4\1\0\7\4\1\0\3\4\40\0\1\u01d0\54\0"+
    "\2\4\1\0\1\66\6\0\1\4\3\0\1\u01d1\7\4"+
    "\1\0\6\4\1\0\7\4\1\0\3\4\55\0\1\u01d2"+
    "\37\0\2\4\1\0\1\66\6\0\1\4\3\0\10\4"+
    "\1\0\4\4\1\u01d3\1\4\1\0\7\4\1\0\3\4"+
    "\42\0\1\u01d4\52\0\2\4\1\0\1\66\6\0\1\4"+
    "\3\0\2\4\1\u01d5\5\4\1\0\6\4\1\0\7\4"+
    "\1\0\3\4\42\0\1\u01d6\52\0\2\4\1\0\1\66"+
    "\6\0\1\4\3\0\2\4\1\u01d7\5\4\1\0\6\4"+
    "\1\0\7\4\1\0\3\4\52\0\1\u01d8\42\0\2\4"+
    "\1\0\1\66\6\0\1\4\3\0\10\4\1\0\1\4"+
    "\1\u01d9\4\4\1\0\7\4\1\0\3\4\52\0\1\u01da"+
    "\42\0\2\4\1\0\1\66\6\0\1\4\3\0\10\4"+
    "\1\0\1\4\1\u01db\4\4\1\0\7\4\1\0\3\4"+
    "\42\0\1\u01dc\52\0\2\4\1\0\1\66\6\0\1\4"+
    "\3\0\2\4\1\u01dd\5\4\1\0\6\4\1\0\7\4"+
    "\1\0\3\4\40\0\1\u01de\54\0\2\4\1\0\1\66"+
    "\6\0\1\4\3\0\1\u01df\7\4\1\0\6\4\1\0"+
    "\7\4\1\0\3\4\22\0\2\4\1\0\1\66\6\0"+
    "\1\4\3\0\3\4\1\u01e0\4\4\1\0\6\4\1\0"+
    "\7\4\1\0\3\4\22\0\2\4\1\0\1\66\6\0"+
    "\1\4\3\0\1\u01e1\7\4\1\0\6\4\1\0\7\4"+
    "\1\0\3\4\52\0\1\u01e2\42\0\2\4\1\0\1\66"+
    "\6\0\1\4\3\0\10\4\1\0\1\4\1\u01e3\4\4"+
    "\1\0\7\4\1\0\3\4\40\0\1\u01e4\54\0\2\4"+
    "\1\0\1\66\6\0\1\4\3\0\1\u01e5\7\4\1\0"+
    "\6\4\1\0\7\4\1\0\3\4\22\0\2\4\1\0"+
    "\1\66\6\0\1\4\3\0\1\u01e6\7\4\1\0\6\4"+
    "\1\0\7\4\1\0\3\4\22\0\2\4\1\0\1\66"+
    "\6\0\1\4\3\0\10\4\1\0\2\4\1\u01e7\3\4"+
    "\1\0\7\4\1\0\3\4\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20650];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\4\1\1\11\1\1\1\11\33\1\6\11"+
    "\1\1\1\11\2\1\1\11\4\1\1\11\5\0\1\11"+
    "\2\0\15\1\1\0\15\1\1\0\1\1\2\0\7\1"+
    "\1\0\7\1\2\11\14\1\1\0\1\1\16\11\1\0"+
    "\2\1\1\0\1\11\1\1\1\11\1\0\4\1\1\0"+
    "\1\1\1\0\4\1\1\0\13\1\1\0\1\1\1\11"+
    "\11\1\1\0\6\1\1\0\1\1\3\0\10\1\1\0"+
    "\2\1\1\0\5\1\1\0\6\1\1\0\6\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\11\1\0\4\1\1\11"+
    "\1\1\1\11\1\1\1\0\3\1\1\11\12\1\1\0"+
    "\1\1\1\0\2\1\1\0\3\1\1\0\1\1\1\0"+
    "\1\1\1\0\3\1\1\0\1\1\3\0\7\1\1\0"+
    "\2\1\1\0\1\1\1\0\3\1\1\0\6\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\1\1\11\1\1\2\0"+
    "\1\11\3\1\1\0\1\1\1\0\10\1\1\11\1\1"+
    "\1\11\2\1\1\11\1\1\1\0\3\1\1\0\1\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\3\0\6\1"+
    "\1\0\2\1\1\0\1\1\1\11\2\1\1\0\5\1"+
    "\1\0\1\1\1\0\1\1\1\11\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\2\1\1\0\5\1\1\0\1\1"+
    "\1\11\2\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\2\0\4\1\1\11\1\1\1\11"+
    "\1\1\1\0\2\1\1\0\1\1\1\0\4\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1\1\11\2\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\1\1\1\0"+
    "\1\11\3\1\1\11\2\1\1\11\1\1\1\11\3\1"+
    "\1\11\1\1\1\11\1\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\1\11\3\1\1\11\1\1\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[487];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

public ArrayList<String> lexical_errors=new ArrayList<String>();
public ArrayList<String> lexical_warnings=new ArrayList<String>();
private String currentText="";
public String getCurrentText(){return currentText;}
StringBuffer string=new StringBuffer();

private Symbol symbol(int type){
	return new Symbol(type,yyline,yycolumn);
}

private Symbol symbol(int type, Object value){
	return new Symbol(type, yyline, yycolumn, value);
}

/* convertir a entero un valor con base y luego convertirlo a un entero de base decimal*/
public Integer unbase_literal(String based){
        String clean=based.replaceAll("[_]|(\\.[_a-zA-Z0-9]*)", "");
        String[] terms=clean.split("#");
        return Integer.parseInt(terms[1],Integer.parseInt(terms[0]));
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Ada95Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 226) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexical_errors.add("Error l√©xico: caracter inesperado: '"+yytext()+"' en l√≠nea "+String.valueOf(yyline+1)+", columna "+String.valueOf(yycolumn+1));
            } 
            // fall through
          case 124: break;
          case 2: 
            { currentText=yytext();return symbol(sym.IDENTIFIER, yytext());
            } 
            // fall through
          case 125: break;
          case 3: 
            { currentText=yytext();return symbol(sym.INTEGER_LITERAL,new Integer(Integer.parseInt(yytext().replaceAll("_",""))));
            } 
            // fall through
          case 126: break;
          case 4: 
            { 
            } 
            // fall through
          case 127: break;
          case 5: 
            { currentText=yytext();return symbol(sym.POINT);
            } 
            // fall through
          case 128: break;
          case 6: 
            { currentText=yytext();return symbol(sym.PLUS);
            } 
            // fall through
          case 129: break;
          case 7: 
            { currentText=yytext();return symbol(sym.MINUS);
            } 
            // fall through
          case 130: break;
          case 8: 
            { string.setLength(0);yybegin(STRING);
            } 
            // fall through
          case 131: break;
          case 9: 
            { currentText=yytext();return symbol(sym.TICK);
            } 
            // fall through
          case 132: break;
          case 10: 
            { currentText=yytext();return symbol(sym.CONCATENATE);
            } 
            // fall through
          case 133: break;
          case 11: 
            { currentText=yytext();return symbol(sym.VERTICAL_LINE);
            } 
            // fall through
          case 134: break;
          case 12: 
            { currentText=yytext();return symbol(sym.EQUAL);
            } 
            // fall through
          case 135: break;
          case 13: 
            { lexical_warnings.add("Advertencia l√©xica: se encontr√≥ '[' en l√≠nea "+String.valueOf(yyline+1)+", columna "+String.valueOf(yycolumn+1)+" y se ha reemplazado por '('");
	currentText=yytext();return symbol(sym.LEFTPAR);
            } 
            // fall through
          case 136: break;
          case 14: 
            { lexical_warnings.add("Advertencia l√©xica: se encontr√≥ ']' en l√≠nea "+String.valueOf(yyline+1)+", columna "+String.valueOf(yycolumn+1)+" y se ha reemplazado por ')'");
	currentText=yytext();return symbol(sym.RIGHTPAR);
            } 
            // fall through
          case 137: break;
          case 15: 
            { lexical_warnings.add("Advertencia l√©xica: se encontr√≥ '{' en l√≠nea "+String.valueOf(yyline+1)+", columna "+String.valueOf(yycolumn+1));
	currentText=yytext();
            } 
            // fall through
          case 138: break;
          case 16: 
            { lexical_warnings.add("Advertencia l√©xica: se encontr√≥ '}' en l√≠nea "+String.valueOf(yyline+1)+", columna "+String.valueOf(yycolumn+1));
	currentText=yytext();
            } 
            // fall through
          case 139: break;
          case 17: 
            { currentText=yytext();return symbol(sym.LEFTPAR);
            } 
            // fall through
          case 140: break;
          case 18: 
            { currentText=yytext();return symbol(sym.RIGHTPAR);
            } 
            // fall through
          case 141: break;
          case 19: 
            { currentText=yytext();return symbol(sym.MULTIPLY);
            } 
            // fall through
          case 142: break;
          case 20: 
            { currentText=yytext();return symbol(sym.COMMA);
            } 
            // fall through
          case 143: break;
          case 21: 
            { currentText=yytext();return symbol(sym.DIVIDE);
            } 
            // fall through
          case 144: break;
          case 22: 
            { currentText=yytext();return symbol(sym.COLON);
            } 
            // fall through
          case 145: break;
          case 23: 
            { currentText=yytext();return symbol(sym.SEMICOLON);
            } 
            // fall through
          case 146: break;
          case 24: 
            { currentText=yytext();return symbol(sym.LT);
            } 
            // fall through
          case 147: break;
          case 25: 
            { currentText=yytext();return symbol(sym.GT);
            } 
            // fall through
          case 148: break;
          case 26: 
            { string.append(yytext());
            } 
            // fall through
          case 149: break;
          case 27: 
            { yybegin(YYINITIAL);
	 currentText=yytext();return symbol(sym.STRING_LITERAL,string.toString());
            } 
            // fall through
          case 150: break;
          case 28: 
            { lexical_errors.add("Error l√©xico: literal de cadena de caracteres no cerrada. En l√≠nea "+String.valueOf(yyline+1)+", columna "+String.valueOf(yycolumn+1));yybegin(YYINITIAL); return symbol(sym.STRING_LITERAL, string.toString());
            } 
            // fall through
          case 151: break;
          case 29: 
            { currentText=yytext();return symbol(sym.DOUBLEDOT);
            } 
            // fall through
          case 152: break;
          case 30: 
            { currentText=yytext();return symbol(sym.CHARACTER_LITERAL,yytext());
            } 
            // fall through
          case 153: break;
          case 31: 
            { currentText=yytext();return symbol(sym.AT);
            } 
            // fall through
          case 154: break;
          case 32: 
            { currentText=yytext();return symbol(sym.DO);
            } 
            // fall through
          case 155: break;
          case 33: 
            { currentText=yytext();return symbol(sym.OR);
            } 
            // fall through
          case 156: break;
          case 34: 
            { currentText=yytext();return symbol(sym.OF);
            } 
            // fall through
          case 157: break;
          case 35: 
            { currentText=yytext();return symbol(sym.IF);
            } 
            // fall through
          case 158: break;
          case 36: 
            { currentText=yytext();return symbol(sym.IS);
            } 
            // fall through
          case 159: break;
          case 37: 
            { currentText=yytext();return symbol(sym.IN);
            } 
            // fall through
          case 160: break;
          case 38: 
            { lexical_warnings.add("Advertencia l√©xica: se encontr√≥ '&&' en l√≠nea "+String.valueOf(yyline+1)+", columna "+String.valueOf(yycolumn+1)+" y deber√≠a ser 'and then'");
	currentText=yytext();return symbol(sym.AND_THEN);
            } 
            // fall through
          case 161: break;
          case 39: 
            { lexical_warnings.add("Advertencia l√©xica: se encontr√≥ '||' en l√≠nea "+String.valueOf(yyline+1)+", columna "+String.valueOf(yycolumn+1)+" y deber√≠a ser 'or else'");
	currentText=yytext();return symbol(sym.OR_ELSE);
            } 
            // fall through
          case 162: break;
          case 40: 
            { lexical_warnings.add("Advertencia l√©xica: se encontr√≥ '==' en l√≠nea "+String.valueOf(yyline+1)+", columna "+String.valueOf(yycolumn+1)+" y deber√≠a ser '='");
	currentText=yytext();return symbol(sym.EQUAL);
            } 
            // fall through
          case 163: break;
          case 41: 
            { currentText=yytext();return symbol(sym.ARROW);
            } 
            // fall through
          case 164: break;
          case 42: 
            { lexical_warnings.add("Advertencia l√©xica: se encontr√≥ '!=' en l√≠nea "+String.valueOf(yyline+1)+", columna "+String.valueOf(yycolumn+1)+" y deber√≠a ser '/='");
	currentText=yytext();return symbol(sym.INEQUALITY);
            } 
            // fall through
          case 165: break;
          case 43: 
            { currentText=yytext();return symbol(sym.EXPONENTIATE);
            } 
            // fall through
          case 166: break;
          case 44: 
            { currentText=yytext();return symbol(sym.INEQUALITY);
            } 
            // fall through
          case 167: break;
          case 45: 
            { currentText=yytext();return symbol(sym.ASSIGNMENT);
            } 
            // fall through
          case 168: break;
          case 46: 
            { currentText=yytext();return symbol(sym.LTEQ);
            } 
            // fall through
          case 169: break;
          case 47: 
            { currentText=yytext();return symbol(sym.LEFTLABEL);
            } 
            // fall through
          case 170: break;
          case 48: 
            { currentText=yytext();return symbol(sym.BOX);
            } 
            // fall through
          case 171: break;
          case 49: 
            { currentText=yytext();return symbol(sym.GTEQ);
            } 
            // fall through
          case 172: break;
          case 50: 
            { currentText=yytext();return symbol(sym.RIGHTLABEL);
            } 
            // fall through
          case 173: break;
          case 51: 
            { currentText=yytext();return symbol(sym.FLOATING_POINT_LITERAL,new Float(Float.parseFloat(yytext().replaceAll("_",""))));
            } 
            // fall through
          case 174: break;
          case 52: 
            { lexical_warnings.add("Advertencia l√©xica: N√∫mero ilegal (con exponente) '"+yytext()+"' sustituido por :"+Float.parseFloat(yytext().replaceAll("_",""))+" en l√≠nea "+String.valueOf(yyline+1)+", columna "+String.valueOf(yycolumn+1));return symbol(sym.FLOATING_POINT_LITERAL,new Float(Float.parseFloat(yytext().replaceAll("_",""))));
            } 
            // fall through
          case 175: break;
          case 53: 
            { currentText=yytext();return symbol(sym.END);
            } 
            // fall through
          case 176: break;
          case 54: 
            { currentText=yytext();return symbol(sym.REM);
            } 
            // fall through
          case 177: break;
          case 55: 
            { currentText=yytext();return symbol(sym.USE);
            } 
            // fall through
          case 178: break;
          case 56: 
            { currentText=yytext();return symbol(sym.FOR);
            } 
            // fall through
          case 179: break;
          case 57: 
            { currentText=yytext();return symbol(sym.ALL);
            } 
            // fall through
          case 180: break;
          case 58: 
            { currentText=yytext();return symbol(sym.AND);
            } 
            // fall through
          case 181: break;
          case 59: 
            { currentText=yytext();return symbol(sym.ABS);
            } 
            // fall through
          case 182: break;
          case 60: 
            { currentText=yytext();return symbol(sym.NEW);
            } 
            // fall through
          case 183: break;
          case 61: 
            { currentText=yytext();return symbol(sym.NOT);
            } 
            // fall through
          case 184: break;
          case 62: 
            { currentText=yytext();return symbol(sym.OUT);
            } 
            // fall through
          case 185: break;
          case 63: 
            { currentText=yytext();return symbol(sym.GET);
            } 
            // fall through
          case 186: break;
          case 64: 
            { currentText=yytext();return symbol(sym.PUT);
            } 
            // fall through
          case 187: break;
          case 65: 
            { currentText=yytext();return symbol(sym.XOR);
            } 
            // fall through
          case 188: break;
          case 66: 
            { currentText=yytext();return symbol(sym.MOD);
            } 
            // fall through
          case 189: break;
          case 67: 
            { lexical_warnings.add("Advertencia L√©xica: N√∫mero ilegal (con base) '"+yytext()+"' sustituido por su equivalente entero:"+ unbase_literal(yytext()).toString()+" en l√≠nea "+String.valueOf(yyline+1)+", columna "+String.valueOf(yycolumn+1)); return symbol(sym.INTEGER_LITERAL,unbase_literal(yytext()));
            } 
            // fall through
          case 190: break;
          case 68: 
            { currentText=yytext();return symbol(sym.ELSE);
            } 
            // fall through
          case 191: break;
          case 69: 
            { currentText=yytext();return symbol(sym.EXIT);
            } 
            // fall through
          case 192: break;
          case 70: 
            { currentText=yytext();return symbol(sym.CASE);
            } 
            // fall through
          case 193: break;
          case 71: 
            { currentText=yytext();return symbol(sym.BOOLEAN_LITERAL,new Boolean(Boolean.parseBoolean(yytext())));
            } 
            // fall through
          case 194: break;
          case 72: 
            { currentText=yytext();return symbol(sym.TASK);
            } 
            // fall through
          case 195: break;
          case 73: 
            { currentText=yytext();return symbol(sym.THEN);
            } 
            // fall through
          case 196: break;
          case 74: 
            { currentText=yytext();return symbol(sym.TYPE);
            } 
            // fall through
          case 197: break;
          case 75: 
            { currentText=yytext();return symbol(sym.LOOP);
            } 
            // fall through
          case 198: break;
          case 76: 
            { currentText=yytext();return symbol(sym.NULL);
            } 
            // fall through
          case 199: break;
          case 77: 
            { currentText=yytext();return symbol(sym.BODY);
            } 
            // fall through
          case 200: break;
          case 78: 
            { currentText=yytext();return symbol(sym.GOTO);
            } 
            // fall through
          case 201: break;
          case 79: 
            { currentText=yytext();return symbol(sym.WHEN);
            } 
            // fall through
          case 202: break;
          case 80: 
            { currentText=yytext();return symbol(sym.WITH);
            } 
            // fall through
          case 203: break;
          case 81: 
            { currentText=yytext();return symbol(sym.ELSIF);
            } 
            // fall through
          case 204: break;
          case 82: 
            { currentText=yytext();return symbol(sym.ENTRY);
            } 
            // fall through
          case 205: break;
          case 83: 
            { currentText=yytext();return symbol(sym.RANGE);
            } 
            // fall through
          case 206: break;
          case 84: 
            { currentText=yytext();return symbol(sym.RAISE);
            } 
            // fall through
          case 207: break;
          case 85: 
            { currentText=yytext();return symbol(sym.UNTIL);
            } 
            // fall through
          case 208: break;
          case 86: 
            { currentText=yytext();return symbol(sym.FLOAT);
            } 
            // fall through
          case 209: break;
          case 87: 
            { currentText=yytext();return symbol(sym.ARRAY);
            } 
            // fall through
          case 210: break;
          case 88: 
            { currentText=yytext();return symbol(sym.ABORT);
            } 
            // fall through
          case 211: break;
          case 89: 
            { currentText=yytext();return symbol(sym.DELTA);
            } 
            // fall through
          case 212: break;
          case 90: 
            { currentText=yytext();return symbol(sym.DELAY);
            } 
            // fall through
          case 213: break;
          case 91: 
            { currentText=yytext();return symbol(sym.BEGIN);
            } 
            // fall through
          case 214: break;
          case 92: 
            { currentText=yytext();return symbol(sym.WHILE);
            } 
            // fall through
          case 215: break;
          case 93: 
            { currentText=yytext();return symbol(sym.TAGGED);
            } 
            // fall through
          case 216: break;
          case 94: 
            { currentText=yytext();return symbol(sym.RECORD);
            } 
            // fall through
          case 217: break;
          case 95: 
            { currentText=yytext();return symbol(sym.RETURN);
            } 
            // fall through
          case 218: break;
          case 96: 
            { currentText=yytext();return symbol(sym.ACCESS);
            } 
            // fall through
          case 219: break;
          case 97: 
            { currentText=yytext();return symbol(sym.ACCEPT);
            } 
            // fall through
          case 220: break;
          case 98: 
            { currentText=yytext();return symbol(sym.SELECT);
            } 
            // fall through
          case 221: break;
          case 99: 
            { currentText=yytext();return symbol(sym.DIGITS);
            } 
            // fall through
          case 222: break;
          case 100: 
            { currentText=yytext();return symbol(sym.OTHERS);
            } 
            // fall through
          case 223: break;
          case 101: 
            { currentText=yytext();return symbol(sym.PRAGMA);
            } 
            // fall through
          case 224: break;
          case 102: 
            { currentText=yytext();return symbol(sym.REVERSE);
            } 
            // fall through
          case 225: break;
          case 103: 
            { currentText=yytext();return symbol(sym.RENAMES);
            } 
            // fall through
          case 226: break;
          case 104: 
            { currentText=yytext();return symbol(sym.REQUEUE);
            } 
            // fall through
          case 227: break;
          case 105: 
            { currentText=yytext();return symbol(sym.ALIASED);
            } 
            // fall through
          case 228: break;
          case 106: 
            { currentText=yytext();return symbol(sym.LIMITED);
            } 
            // fall through
          case 229: break;
          case 107: 
            { currentText=yytext();return symbol(sym.SUBTYPE);
            } 
            // fall through
          case 230: break;
          case 108: 
            { currentText=yytext();return symbol(sym.DECLARE);
            } 
            // fall through
          case 231: break;
          case 109: 
            { currentText=yytext();return symbol(sym.OR_ELSE);
            } 
            // fall through
          case 232: break;
          case 110: 
            { currentText=yytext();return symbol(sym.BOOLEAN);
            } 
            // fall through
          case 233: break;
          case 111: 
            { currentText=yytext();return symbol(sym.INTEGER);
            } 
            // fall through
          case 234: break;
          case 112: 
            { currentText=yytext();return symbol(sym.GENERIC);
            } 
            // fall through
          case 235: break;
          case 113: 
            { currentText=yytext();return symbol(sym.PRIVATE);
            } 
            // fall through
          case 236: break;
          case 114: 
            { currentText=yytext();return symbol(sym.PACKAGE);
            } 
            // fall through
          case 237: break;
          case 115: 
            { currentText=yytext();return symbol(sym.CONSTANT);
            } 
            // fall through
          case 238: break;
          case 116: 
            { currentText=yytext();return symbol(sym.FUNCTION);
            } 
            // fall through
          case 239: break;
          case 117: 
            { currentText=yytext();return symbol(sym.AND_THEN);
            } 
            // fall through
          case 240: break;
          case 118: 
            { currentText=yytext();return symbol(sym.ABSTRACT);
            } 
            // fall through
          case 241: break;
          case 119: 
            { currentText=yytext();return symbol(sym.SEPARATE);
            } 
            // fall through
          case 242: break;
          case 120: 
            { currentText=yytext();return symbol(sym.EXCEPTION);
            } 
            // fall through
          case 243: break;
          case 121: 
            { currentText=yytext();return symbol(sym.TERMINATE);
            } 
            // fall through
          case 244: break;
          case 122: 
            { currentText=yytext();return symbol(sym.PROCEDURE);
            } 
            // fall through
          case 245: break;
          case 123: 
            { currentText=yytext();return symbol(sym.PROTECTED);
            } 
            // fall through
          case 246: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
